// original map scripted by MaPhisto (adding random units)
// script update with melting ice by sado
// feel free to use this in other maps... if you know how ;)

{
TODO
- performance tweaks ie. spreading this throughout ticks, could be nice
}

const
	MeltLimit = 13; // 31
	MeltInnermostLimit = 8; // 26
	TimeOfStart = 1; // 600
        SecondRunOffset = 50;

var
	X: array [0..3] of Integer;
	Y: array [0..3] of Integer;
	MeltModifier: Integer;
	MeltCurrentModifier: array [0..1] of Integer;
	DecideIfIsInsideMeltLimit, AreWeInX: Boolean;

procedure ThunderAddRandomTroops;
var P,a,b,c,d,e: Integer;
begin
	X[0]:= 47;
	Y[0]:= 10;
	X[1]:= 88;
	Y[1]:= 48;
	X[2]:= 50;
	Y[2]:= 86;
	X[3]:= 7;
	Y[3]:= 48;

	//unittype randomisation
	//making a group fixed as ranged
	e:= 0+(States.KamRandomI(3));
	case (e) of
		0: a:= 17;
		1: a:= 18;
		2: a:= 25;
	end;
	//a:= 14+(States.KamRandomI(14));
	b:= 14+(States.KamRandomI(14));
	c:= 14+(States.KamRandomI(14));
	d:= 14+(States.KamRandomI(14));

	for P := 0 to 3 do
		if States.PlayerEnabled(P) then
		begin
			//bot
			//Fixed ranged group
			Actions.GiveGroup(P,a,X[P],(Y[P]+4),4,12,3);
			//left
			Actions.GiveGroup(P,b,(X[P]-3),Y[P]+1,4,12,3);
			//right
			Actions.GiveGroup(P,c,(X[P]+3),(Y[P]-1),0,12,3);
			//top
			Actions.GiveGroup(P,d,X[P],(Y[P]-4),0,12,3);
		end;
end;


{
	water 193
	ice: 44
	ice -> water: 12 even, 23 corner, 22 big corner
	ice -> snow: 4 even, 10 corner
}

function SadoDecideForTileType(DecideSrcTileType: Integer; IsInsideMeltLimit: Boolean) : Integer;
begin
	if IsInsideMeltLimit then
		case DecideSrcTileType of
			44 : result := 12;
			23, 12, 22 : result := 193; // remember to add every similar tile type in change tiledirection!
			4, 10: result := 193;
			// water TODO
			193, 208, 209, 240, 244, 192, 196: result := 193;
			// iron/snow even 166 -> 210 water flowing to top
			166: result := 210;
			// iron/snow corner 54 -> 239 iron/water (238 is rotated in a wrong way)
			54: result := 239;
			// iron/snow 52 small corner -> 236 corner flowing water
			52: result := 236;
			// snow
			45, 46, 203, 204, 205, 47, 220, 212, 213 : result := 4;
			
			// grassy desert
			26, 27: result := 242;
			75, 76, 77 : result := 4;
			// 241 gd-w corner
			// 242 gd-w 50% 
			// 243 gd-w reverse corner (xD)
			241, 242, 243 : result := 193;
			else
				result := -1;
		end
	else
		case DecideSrcTileType of
			44 : result := 12;
			23, 12, 22 : result := 193; 
			4, 10: result := -1;
			// water TODO
			193, 208, 209, 240, 244, 192, 196: result := 193;
			// iron/snow even 166 -> 210 water flowing to top
			166: result := 210;
			// iron/snow corner 54 -> 239 iron/water (238 is rotated in a wrong way)
			54: result := 239;
			// iron/snow 52 small corner -> 236 corner flowing water
			52: result := 236;
			// snow
			45, 46, 203, 204, 205, 47, 220, 212, 213 : result := -1;
			
			// grassy desert
			26, 27: result := 242;
			75, 76, 77 : result := -1;
			// 241 gd-w corner
			// 242 gd-w 50% 
			// 243 gd-w reverse corner (xD)
			241, 242, 243 : result := 193;
			else
				result := -1;
		end;
end;

procedure SadoFillOneTile(TileDirection, FilledTileX, FilledTileY, PreviousFilledTileXModifier, PreviousFilledTileYModifier: Integer; IsInsideMeltLimit: Boolean);
var result1, result2, tileType1, tileType2: Integer;
begin
	if (States.MapTileObject(FilledTileX, FilledTileY) <> 255) then
                Actions.MapTileObjectSet(FilledTileX, FilledTileY, 255);
	if ( (FilledTileX > 0) and (FilledTileY > 0) and (FilledTileX < States.MapWidth) and (FilledTileY < States.MapHeight)) then
	begin
		tileType1 := States.MapTileType(FilledTileX, FilledTileY);
		result1 := SadoDecideForTileType(tileType1, IsInsideMeltLimit);
		if (result1 <> -1) then
		begin
			if (States.UnitAt(FilledTileX, FilledTileY) <> -1) then
				Actions.UnitKill(States.UnitAt(FilledTileX, FilledTileY), True);
			
			if ( ( (FilledTileX + PreviousFilledTileXModifier) > 0) and ( (FilledTileY + PreviousFilledTileYModifier) > 0) and ((FilledTileX + PreviousFilledTileXModifier) < States.MapWidth) and ((FilledTileY + PreviousFilledTileYModifier) < States.MapHeight)) then
			begin
				tileType2 := States.MapTileType(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier);
				result2 := SadoDecideForTileType(tileType2, IsInsideMeltLimit);
				if ((result2 <> -1) and (result2 <> 23) and (result2 <> 12) and (result2 <> 22) and (result1 <> 10) and (result1 <> 4)) then
				begin
					Actions.MapTileSet(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier, result2, States.MapTileRotation(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier));
				end;
			end;
			
			if (result1 <> 23) and (result1 <> 12) and (result1 <> 22) and (result1 <> 241) and (result1 <> 242) and (result1 <> 243) then
				TileDirection := States.MapTileRotation(FilledTileX, FilledTileY);

			Actions.MapTileSet(FilledTileX, FilledTileY, result1, TileDirection);
		end;
	end;
end;

procedure SadoKillMarauders(whichRun: Integer);
var P, UnitNr, UnitID, UnitX, UnitY: Integer;
var AllUnits: array of Integer;
begin
  for P := 0 to States.StatPlayerCount() - 1 do
  begin
    Actions.Log('Start logging units');
    if States.PlayerEnabled(P) then
    begin
      AllUnits := States.PlayerGetAllUnits(P);
      for UnitNr := 0 to Length(AllUnits)-1 do
      begin
        UnitID := AllUnits[UnitNr];
        UnitX :=  States.UnitPositionX(UnitID);
        UnitY := States.UnitPositionY(UnitID);
        if ( (UnitX < MeltCurrentModifier[whichRun]) 
            or (UnitX > States.MapWidth - MeltCurrentModifier[whichRun])
            or (UnitY < MeltCurrentModifier[whichRun]) 
            or (UnitY > States.MapHeight - MeltCurrentModifier[whichRun]) ) then
            begin
              Actions.UnitKill(UnitID, True);
            end
            else
              Actions.Log('UnitID: ' + IntToStr(UnitID) + ' Coords: [' + IntToStr(UnitX) + ',' + IntToStr(UnitY) + ']');
      end;
    end;
    Actions.Log('Stop logging units');
  end;
end;

procedure SadoMeltMap(offset: Integer; whichRun: Integer);
var MeltX, MeltY, offsetTmp: Integer;
begin;
{
MeltCurrentModifier[whichRun] - value gets +1 in every iteration 
 There are 2 arrays, because we need a second try, to remove remaining ground, after troops which had to be killed off using SadoKillMarauders procedure...
 Issue is related to troops walking diagonally, when their colleague gets killed
 offset - it makes the second try start a few tiles earlier, in order to go over yet undeleted tiles in the water
MeltModifier - average of map height and width.
 Helps to figure out a diagonal border.
 Border separates 4 directions of flood (from top, right, bottom and left).
MeltLimit - bigger limit
MeltInnermostLimit - smaller limit (closer to the center)


}
	offsetTmp := offset;
	
	if (MeltCurrentModifier[whichRun] = offsetTmp) then
	begin
	  MeltCurrentModifier[whichRun] := 0;
	  offsetTmp := -1;
        end;
        // stop the flood, once we are in distance of MeltInnermostLimit from the edge of the map
	if (MeltCurrentModifier[whichRun] < (MeltModifier - MeltInnermostLimit) ) then
	begin
		// true, if we did not cross border - higher limit
		// TODO why needed?
		DecideIfIsInsideMeltLimit := (MeltCurrentModifier[whichRun] < (MeltModifier - MeltLimit) );
		MeltCurrentModifier[whichRun] := MeltCurrentModifier[whichRun] + 1;
		AreWeInX := False;
		// X melt cycle (from left and right)
		for MeltX := 1 to States.MapWidth - 1 do // todo (MeltModifier - MeltLimit) here
		begin
			// first try to melt
                        SadoFillOneTile(2, MeltX, MeltCurrentModifier[whichRun], 0, -1, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(0, MeltX, States.MapHeight - MeltCurrentModifier[whichRun], 0, 1, DecideIfIsInsideMeltLimit);
			AreWeInX := True;
		end;
		// Y melt cycle (from top and bottom)
		for MeltY := MeltCurrentModifier[whichRun] to States.MapHeight - MeltCurrentModifier[whichRun] do
		begin
			SadoFillOneTile(1, MeltCurrentModifier[whichRun], MeltY, -1, 0, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(3, States.MapWidth - MeltCurrentModifier[whichRun], MeltY, 1, 0, DecideIfIsInsideMeltLimit);
			AreWeInX := False;
		end;
	    // SadoKillMarauders;
        end;
        
end;

procedure OnMissionStart;
begin
	ThunderAddRandomTroops;
	MeltCurrentModifier[0] := 0;
	MeltCurrentModifier[1] := 0;
	MeltModifier := round((States.MapHeight + Abs(States.MapHeight - States.MapWidth) ) div 2);
end;


procedure OnTick;
begin
	if (States.GameTime > TimeOfStart) then
	begin
	  if (States.GameTime mod 51 = 0) then
		  SadoMeltMap(0, 0);
	  if (States.GameTime mod 57 = 0) then
	          SadoKillMarauders(0);
	  if (States.GameTime mod 61 = 0) then
	          SadoMeltMap(SecondRunOffset, 1);
	end;
end;
