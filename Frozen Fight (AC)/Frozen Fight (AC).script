// original map scripted by MaPhisto (adding random units)
// script update with melting ice by sado

{
TODO
- fix workflow of filling with snow/ice transition in the inner circle
- fix case, when two troops in a row mean artifacts of ice on water surface
- fix all logged errors
- test performance
}


const
	MeltSourceTileType = 1;
	MeltTargetTileType = 193; // 44 ice
	MeltTargetTileTypeTransition1 = 12; // 12 even, 23 corner, 22 big corner
	MeltTargetTileTypeTransition2 = 4; // 12 even, 23 corner, 22 big corner
	MeltLimit = 13;
	MeltInnermostLimit = 5;

var
	X: array [0..3] of Integer;
	Y: array [0..3] of Integer;
	MeltCurrentModifier, MeltModifier: Integer;
	DecideIfIsInsideMeltLimit, AreWeInX: Boolean;


procedure ThunderAddRandomTroops;
var P,a,b,c,d,e: Integer;
begin
	X[0]:= 47;
	Y[0]:= 10;
	X[1]:= 88;
	Y[1]:= 48;
	X[2]:= 50;
	Y[2]:= 86;
	X[3]:= 7;
	Y[3]:= 48;

	//unittype randomisation
	//making a group fixed as ranged
	e:= 0+(States.KamRandomI(3));
	case (e) of
		0: a:= 17;
		1: a:= 18;
		2: a:= 25;
	end;
	//a:= 14+(States.KamRandomI(14));
	b:= 14+(States.KamRandomI(14));
	c:= 14+(States.KamRandomI(14));
	d:= 14+(States.KamRandomI(14));

	for P := 0 to 3 do
		if States.PlayerEnabled(P) then
		begin
			//bot
			//Fixed ranged group
			Actions.GiveGroup(P,a,X[P],(Y[P]+4),4,12,3);
			//left
			Actions.GiveGroup(P,b,(X[P]-3),Y[P]+1,4,12,3);
			//right
			Actions.GiveGroup(P,c,(X[P]+3),(Y[P]-1),0,12,3);
			//top
			Actions.GiveGroup(P,d,X[P],(Y[P]-4),0,12,3);
		end;
end;


{
	MeltTargetTileType = 193;           // water
	MeltTargetTileTypeTransition1 = 12; // ice water even 
	MeltTargetTileTypeTransition2 = 4;  // ice snow even
	water 193
	ice: 44
	ice -> water: 12 even, 23 corner, 22 big corner
	ice -> snow: 4 even, 10 corner
	
}

function SadoDecideForTileType(DecideSrcTileType: Integer; IsInsideMeltLimit: Boolean) : Integer;
begin
	if IsInsideMeltLimit then
		case DecideSrcTileType of
			44 : result := 12;
			23, 12, 22 : result := 193;
			4, 10: result := 193;
			// water TODO
			193, 208, 209, 240, 244, 192, 196: result := 193;
			// iron/snow even 166 -> 210 water flowing to top
			166: result := 210;
			// iron/snow corner 54 -> 239 iron/water (238 is rotated in a wrong way)
			54: result := 239;
			// iron/snow 52 small corner -> 236 corner flowing water
			52: result := 236;
			// snow
			45, 46, 203, 204, 205, 47, 220, 212, 213 : result := 4;
			else
				result := -1;
		end
	else
		case DecideSrcTileType of
			44 : result := 12;
			23, 12, 22 : result := 193;
			4, 10: result := -1;
			// water TODO
			193, 208, 209, 240, 244, 192, 196: result := 193;
			// iron/snow even 166 -> 210 water flowing to top
			166: result := 210;
			// iron/snow corner 54 -> 239 iron/water (238 is rotated in a wrong way)
			54: result := 239;
			// iron/snow 52 small corner -> 236 corner flowing water
			52: result := 236;
			// snow
			45, 46, 203, 204, 205, 47, 220, 212, 213 : result := -1;
			else
				result := -1;
		end;
end;

procedure SadoFillOneTile(TileDirection, FilledTileX, FilledTileY, PreviousFilledTileXModifier, PreviousFilledTileYModifier: Integer; IsInsideMeltLimit: Boolean);
var result1, result2, tileType1, tileType2: Integer;
begin
	if ( (FilledTileX > 0) and (FilledTileY > 0) and (FilledTileX < States.MapWidth) and (FilledTileY < States.MapHeight)) then
	begin
		tileType1 := States.MapTileType(FilledTileX, FilledTileY);
		result1 := SadoDecideForTileType(tileType1, IsInsideMeltLimit);
		if (result1 <> -1) then
		begin
			if (States.UnitAt(FilledTileX, FilledTileY) <> -1) then
				Actions.UnitKill(States.UnitAt(FilledTileX, FilledTileY), True);
			
			{ tileType3 := States.MapTileType(FilledTileX + PreviousFilledTileXModifier*2, FilledTileY + PreviousFilledTileYModifier*2);
			result3 := SadoDecideForTileType(tileType3, IsInsideMeltLimit);
			if (result3 = 10) or (result3 = 4) then
			begin
				//TileDirection := (TileDirection + 2) mod 4;
				// TODO use IsInsideMeltLimit and decide to fill with water, snow/ice even transition, or leave it alone, when in smallest circle
				Actions.MapTileSet(FilledTileX + PreviousFilledTileXModifier*2, FilledTileY + PreviousFilledTileYModifier*2, result3, TileDirection);
			end; }
			if ( ( (FilledTileX + PreviousFilledTileXModifier) > 0) and ( (FilledTileY + PreviousFilledTileYModifier) > 0) and ((FilledTileX + PreviousFilledTileXModifier) < States.MapWidth) and ((FilledTileY + PreviousFilledTileYModifier) < States.MapHeight)) then
			begin
				tileType2 := States.MapTileType(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier);
				result2 := SadoDecideForTileType(tileType2, IsInsideMeltLimit);
				if ((result2 <> -1) and (result2 <> 23) and (result2 <> 12) and (result2 <> 22) and (result1 <> 10) and (result1 <> 4)) then
				begin
					Actions.MapTileSet(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier, result2, States.MapTileRotation(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier));
				end;
			end;
			
			if (result1 <> 23) and (result1 <> 12) and (result1 <> 22) then
				TileDirection := States.MapTileRotation(FilledTileX, FilledTileY);

			Actions.MapTileSet(FilledTileX, FilledTileY, result1, TileDirection);
		end;
	end;
end;

procedure SadoMeltMap;
var MeltX, MeltY: Integer;
begin;
	if (MeltCurrentModifier < (MeltModifier - MeltInnermostLimit) ) then
	begin
		DecideIfIsInsideMeltLimit := (MeltCurrentModifier < (MeltModifier - MeltLimit) );
		MeltCurrentModifier := MeltCurrentModifier + 1;
		AreWeInX := False;
		for MeltX := 1 to States.MapWidth - 1 do // todo (MeltModifier - MeltLimit) here
		begin
			SadoFillOneTile(2, MeltX, MeltCurrentModifier, 0, -1, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(0, MeltX, States.MapHeight - MeltCurrentModifier, 0, 1, DecideIfIsInsideMeltLimit);
			AreWeInX := True;
		end;
		for MeltY := MeltCurrentModifier to States.MapHeight - MeltCurrentModifier do
		begin
			SadoFillOneTile(1, MeltCurrentModifier, MeltY, -1, 0, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(3, States.MapWidth - MeltCurrentModifier, MeltY, 1, 0, DecideIfIsInsideMeltLimit);
			AreWeInX := False;
		end;
	end;
	// TODO rotation 0-3 random

end;

procedure OnMissionStart;
begin
	ThunderAddRandomTroops;
	MeltCurrentModifier := 0;
	MeltModifier := round((States.MapHeight + Abs(States.MapHeight - States.MapWidth) ) div 2);

	// list of tiles which we want to replace
	//TileTypesList := tileTypesListType.Create(1,2,3);
	// MeltCurrentModifier := -1 * round((States.MapHeight + Abs(States.MapHeight - States.MapWidth) ) div 2);
end;


procedure OnTick;
begin
	if (States.GameTime mod 2 = 0) then
		SadoMeltMap;
end;
