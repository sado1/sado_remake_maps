// original map scripted by MaPhisto (adding random units)
// script update with melting ice by sado

const
	MeltSourceTileType = 1;
	MeltTargetTileType = 193; // 44 ice
	MeltTargetTileTypeTransition1 = 12; // 12 even, 23 corner, 22 big corner
	MeltTargetTileTypeTransition2 = 4; // 12 even, 23 corner, 22 big corner
	MeltLimit = 14;
	MeltInnermostLimit = 5;

var
	X: array [0..3] of Integer;
	Y: array [0..3] of Integer;
	MeltCurrentModifier, MeltModifier: Integer;
	DirI, DirII, DirIII, DirIV: Integer;
	DecideIfIsInsideMeltLimit, AreWeInX: Boolean;


procedure ThunderAddRandomTroops;
var P,a,b,c,d,e: Integer;
begin
	X[0]:= 47;
	Y[0]:= 10;
	X[1]:= 88;
	Y[1]:= 48;
	X[2]:= 50;
	Y[2]:= 86;
	X[3]:= 7;
	Y[3]:= 48;

	//unittype randomisation
	//making a group fixed as ranged
	e:= 0+(States.KamRandomI(3));
	case (e) of
		0: a:= 17;
		1: a:= 18;
		2: a:= 25;
	end;
	//a:= 14+(States.KamRandomI(14));
	b:= 14+(States.KamRandomI(14));
	c:= 14+(States.KamRandomI(14));
	d:= 14+(States.KamRandomI(14));

	for P := 0 to 3 do
		if States.PlayerEnabled(P) then
		begin
			//bot
			//Fixed ranged group
			Actions.GiveGroup(P,a,X[P],(Y[P]+4),4,12,3);
			//left
			Actions.GiveGroup(P,b,(X[P]-3),Y[P]+1,4,12,3);
			//right
			Actions.GiveGroup(P,c,(X[P]+3),(Y[P]-1),0,12,3);
			//top
			Actions.GiveGroup(P,d,X[P],(Y[P]-4),0,12,3);
		end;
end;

function SadoDecideForTileType(DecideSrcTileType: Integer; IsInsideMeltLimit: Boolean) : Boolean;
begin
	if IsInsideMeltLimit then
		case DecideSrcTileType of
			44, 23, 12, 22, 10, 4 : result := True;
			46, 203, 204, 205, 47, 220, 212, 213 : result := True;
			else
				result := False;
		end
	else
		case DecideSrcTileType of
			44, 23, 12, 22, 10, 4 : result := True;
			//46, 203, 204, 205, 47, 220, 212, 213 : result := True;
			else
				result := False;
		end;
end;

procedure SadoFillOneTile(TileDirection, FilledTileX, FilledTileY, PreviousFilledTileXModifier, PreviousFilledTileYModifier: Integer; IsInsideMeltLimit: Boolean);
begin
	if SadoDecideForTileType(States.MapTileType(FilledTileX, FilledTileY), IsInsideMeltLimit) then
	begin
		if (States.UnitAt(FilledTileX, FilledTileY) <> -1) then
			Actions.UnitKill(States.UnitAt(FilledTileX, FilledTileY), True);
		Actions.MapTileSet(FilledTileX + PreviousFilledTileXModifier*2, FilledTileY + PreviousFilledTileYModifier*2, MeltTargetTileType, TileDirection);
		Actions.MapTileSet(FilledTileX + PreviousFilledTileXModifier, FilledTileY + PreviousFilledTileYModifier, MeltTargetTileTypeTransition1, TileDirection);
		Actions.MapTileSet(FilledTileX, FilledTileY, MeltTargetTileTypeTransition2, (TileDirection + 2) mod 4);
	end;
end;

procedure SadoMeltMap;
var MeltX, MeltY: Integer;
begin;
	// TODO if unit is there then kill it
	// and then change tile
	//if (MeltCurrentModifier < States.MapHeight) and (MeltCurrentModifier < States.MapWidth) then
	if (MeltCurrentModifier < (MeltModifier - MeltInnermostLimit) ) then
	begin
		DecideIfIsInsideMeltLimit := (MeltCurrentModifier < (MeltModifier - MeltLimit) );
		MeltCurrentModifier := MeltCurrentModifier + 1;
		AreWeInX := False;
		for MeltX := 1 to States.MapWidth do // todo (MeltModifier - MeltLimit) here
		begin
			SadoFillOneTile(2, MeltX, MeltCurrentModifier, 0, -1, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(0, MeltX, States.MapHeight - MeltCurrentModifier, 0, 1, DecideIfIsInsideMeltLimit);
			AreWeInX := True;
		end;
		for MeltY := MeltCurrentModifier to States.MapHeight - MeltCurrentModifier do
		begin
			SadoFillOneTile(1, MeltCurrentModifier, MeltY, -1, 0, DecideIfIsInsideMeltLimit);
			SadoFillOneTile(3, States.MapWidth - MeltCurrentModifier, MeltY, 1, 0, DecideIfIsInsideMeltLimit);
			AreWeInX := False;
		end;
	end;
	// TODO rotation 0-3 random

end;

procedure OnMissionStart;
begin
	ThunderAddRandomTroops;
	MeltCurrentModifier := 0;
	MeltModifier := round((States.MapHeight + Abs(States.MapHeight - States.MapWidth) ) div 2);
	DirI := 0+(States.KamRandomI(3));
	DirII := 0+(States.KamRandomI(3));
	DirIII := 0+(States.KamRandomI(3));
	DirIV := 0+(States.KamRandomI(3));
	// list of tiles which we want to replace
	//TileTypesList := tileTypesListType.Create(1,2,3);
	// MeltCurrentModifier := -1 * round((States.MapHeight + Abs(States.MapHeight - States.MapWidth) ) div 2);
end;


procedure OnTick;
begin
	if (States.GameTime mod 2 = 0) then
		SadoMeltMap;
end;
